swagger: "2.0"
info:
  version: "0.0.1"
  title: Swagger JWT
host: localhost:3000
basePath: /api
schemes:
  - http
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in the 'Authorization' header. A valid JWT token is generated by the API and retourned as answer of a call to the route /login giving a valid user & password. The following syntax must be used in the 'Authorization' header : Bearer xxxxxx.yyyyyyy.zzzzzz

consumes:
  - application/json
produces:
  - application/json

paths:
  /login/{role}:
    x-swagger-router-controller: authController
    post:
      operationId: login
      description: "Login with a particular role"
      parameters:
        - name: role
          in: path
          required: true
          type: string
        - name: authentication
          in: body
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Token"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
            
  /post:
    x-swagger-router-controller: postController
    get:
      operationId: getPost
      description: "Read post paginated"
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      parameters:
        - $ref: "#/parameters/Page"
        - $ref: "#/parameters/Size"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      operationId: createPost
      description: "Create post only by admins."
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      parameters:
        - name: createPost
          in: body
          required: true
          schema:
            $ref: "#/definitions/CreatePost"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /post/{id}:
    x-swagger-router-controller: postController
    patch:
      operationId: editPost
      description: "Edit post only by admins."
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - name: editPost
          in: body
          required: true
          schema:
            $ref: "#/definitions/EditPost"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      operationId: deletePost
      description: "Delete post only by admins."
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

definitions:
  Authentication:
    type: object
    properties:
      username:
        type: string
        example: "username"
      password:
        type: string
        example: "password"
  CreatePost:
    type: object
    properties:
      post:
        type: string
        example: "it is a sample post"
  EditPost:
    type: object
    properties:
      post:
        type: string
        example: "it is a sample post"
  Resource:
    type: object
    properties:
      resource:
        type: string
  Token:
    type: object
    properties:
      token:
        type: string
  Error:
    type: object
    properties:
      message:
        type: string

parameters:
  # Query parameters
  Page:
    name: page
    description: Page Number
    in: query
    type: integer
    required: false
    default: 1
    minimum: 1
    maximum: 100
  Size:
    name: size
    description: Page size
    in: query
    type: integer
    required: false
    default: 10
    minimum: 1
    maximum: 10000
